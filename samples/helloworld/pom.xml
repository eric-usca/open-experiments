<?xml version="1.0" encoding="ISO-8859-1"?>
  <!--
    * Licensed to the Sakai Foundation (SF) under one 
    * or more contributor license agreements. See the NOTICE file 
    * distributed with this work for additional information 
    * regarding copyright ownership. The SF licenses this file 
    * to you under the Apache License, Version 2.0 (the "License"); 
    * you may not use this file except in compliance with the License. 
    * You may obtain a copy of the License at 
    * 
    * http://www.apache.org/licenses/LICENSE-2.0 
    * 
    * Unless required by applicable law or agreed to in writing, 
    * software distributed under the License is distributed
    on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
    * KIND, either express or implied. See the License for the 
    * specific language governing permissions and limitations underthe License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <!--  Extend the Nakamura Base Pom which has a whole bunch of things that will simplify life easier here. -->
  <parent>
    <groupId>org.sakaiproject.nakamura</groupId>
    <artifactId>base</artifactId>
    <version>0.6-SNAPSHOT</version>
  </parent>
  <!-- 
  Give the Jar a name, this should be a name that is clearly identifiable when placed in the same folder as lots of other jars.
  ie Don't call it "helloworld" as it could clash with 100 other hello worlds. 
   -->
  <artifactId>org.sakaiproject.nakamura.samples.helloworld</artifactId>
  
  <!--
   bundle packaging is a Jar with a Manifest generated by the BND tool. The maven-bundle-plugin performs this operation based on the 
   directives that it is given in its configuration. 
   -->
  <packaging>bundle</packaging>
  <!-- 
  Give the bundle or jar a version number. Its best to follow the standard maven version scheme. SNAPSHOTs are used to indicate to
  maven that this artifact has not been released. THe version number before the SNAPSHOT is the version of the bundle that this
  artifact will eventually be released as. ie we are working to release the 0.6 version but we are not there yet.
   -->
  <version>0.6-SNAPSHOT</version>
  <!-- Give the bundle a reasonable human name, this will appear in the OSGi Console -->
  <name>Sakai Nakamura Samples: Hello World</name>
  <!--  and a description would be nice. -->
  <description>Sample Bundle: Hello World.</description>
  
  
  <!--  Configure the build with 2 plugins. -->
  <build>
    <plugins>
      <!--  
      the SCR plugin generates the OSGi files as directed by annotations in the code. 
      This saves you having to keep an xml file in sync with the code. 
      -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-scr-plugin</artifactId>
      </plugin>
      <!--
      The maven bundle plugin has 2 functions. It analyzes the code compiled code using the 
      BND tool to work out all the packages that are referenced in the code base. From that
      it builds an package import list. Finally it merges what its found with the directives
      given here and writes a MANIFEST.MF. Finally it constructs a Jar with the generated
      MANIFEST.MF. You could manually craft a MANIFEST.MF but thats hard work. Also you could 
      use the BND tool directly, however this is easy and works. 
       -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Bundle-Category> sakai-nakamura-sample </Bundle-Category>
            <!-- This bundle will export some APIs under in this package -->
            <Export-Package> org.sakaiproject.nakamura.samples.api.helloworld </Export-Package>
            <!--  and hide some implementation classes in this package. -->
            <Private-Package> org.sakaiproject.nakamura.samples.helloworld </Private-Package>
          </instructions>
        </configuration>
      </plugin>
    </plugins>
  </build>
  
  <!--  some dependencies we need -->
  <dependencies>
  
    <!--  Servlet API -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
    </dependency>
    
    
    <!--  SLF4J Logging API -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    
    <!--  SCR Annotations, used by the scr plugin to construct serviceComponents.xml and other Declaritive service files -->
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.scr.annotations</artifactId>
    </dependency>
    
    <!--  Core OSGi -->
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.osgi.core</artifactId>
    </dependency>
    
    <!--  The OSGi Compendium -->
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.osgi.compendium</artifactId>
    </dependency>
    
    
    <!--  Logging Implementation for testing -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <scope>test</scope>
    </dependency>
    
    <!--  Mock support for testing -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.8.4</version>
      <scope>test</scope>
    </dependency>
    
    
  </dependencies>
</project>
